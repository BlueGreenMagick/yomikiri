version: '3'

run: when_changed

includes:
  rust-shared:
    taskfile: ../../extra/taskfile/Rust-Taskfile.yml
    flatten: true

vars:
  PROJECT_ROOT: ../../
  SWIFT_DIR: ./swift
  APPLE_PROJECT_RUST_DIR: ../../safari/YomikiriTokenizer/rust
  KOTLIN_DIR: '{{.PROJECT_ROOT}}/generated/backend-kotlin-bindings'
  ANDROID_LIB_DIR: '{{.PROJECT_ROOT}}/generated/backend-android-lib'

  FLAG_RELEASE: '{{if .RELEASE}}--release{{end}}'

  IOS_TARGETS: >
    aarch64-apple-ios
    aarch64-apple-ios-sim

  ANDROID_TARGETS: >
    aarch64-linux-android
    armv7-linux-androideabi
    i686-linux-android
    x86_64-linux-android

  INSTALLED_TARGETS:
    sh: rustup target list --installed

tasks:
  build:ios:
    deps: [_clean-if-release]
    cmds:
      - task: generate:uniffi
        vars:
          LANGUAGE: swift
          OUT_DIR: '{{.SWIFT_DIR}}'
      - 'mkdir -p "{{.APPLE_PROJECT_RUST_DIR}}"'
      - 'cp -r {{.SWIFT_DIR}}/* "{{.APPLE_PROJECT_RUST_DIR}}/"'
      - task: _rustup_install_targets
        vars:
          TARGETS_VAR: '{{.IOS_TARGETS}}'
      - task: _build:lib
        vars:
          FLAG_TARGET: '{{range $i, $val := splitList " " .IOS_TARGETS}}--target {{$val}} {{end}}'

  build:android:
    deps: [_clean-if-release]
    vars:
      FLAG_TARGET: '{{range $i, $val := splitList " " .ANDROID_TARGETS}}--target {{$val}} {{end}}'
    cmds:
      - task: generate:uniffi
        vars:
          LANGUAGE: kotlin
          OUT_DIR: '{{.KOTLIN_DIR}}'
      - task: _rustup_install_targets
        vars:
          TARGETS_VAR: '{{.ANDROID_TARGETS}}'
      - 'cargo ndk -o "{{.ANDROID_LIB_DIR}}" --manifest-path ./Cargo.toml {{.FLAG_TARGET}} build {{.FLAG_RELEASE}}'

  # Rust lib build skip is delegated to cargo
  _build:lib:
    internal: true
    requires:
      vars: [FLAG_TARGET]
    cmds:
      - 'cargo build --lib {{.FLAG_RELEASE}} {{.FLAG_TARGET}}'

  generate:uniffi:
    requires:
      vars: [LANGUAGE, OUT_DIR]
    deps:
      - task: _build:lib
        vars:
          FLAG_TARGET: ''
    cmds:
      - task: _generate:uniffi
        vars:
          LANGUAGE: '{{.LANGUAGE}}'
          OUT_DIR: '{{.OUT_DIR}}'

  _generate:uniffi:
    internal: true
    requires:
      vars: [LANGUAGE, OUT_DIR]
    vars:
      RELEASE_SEG: '{{if .RELEASE}}release{{else}}debug{{end}}'
      LIB_DIR: '../../target/{{.RELEASE_SEG}}'
      SO_PATH: '{{.LIB_DIR}}/libyomikiri_backend_uniffi.so'
      DYLIB_PATH: '{{.LIB_DIR}}/libyomikiri_backend_uniffi.dylib'
      # Lib may be .so on linux and .dylib on macos
      LIB_PATH:
        sh: |
          if [ -f "{{.DYLIB_PATH}}" ]; then
            echo "{{.DYLIB_PATH}}"
          elif [ -f "{{.SO_PATH}}" ]; then
            echo "{{.SO_PATH}}"
          else
            echo "{{.LIB_DIR}}/__ERROR_COULD_NOT_FIND_BUILT_LIB_FILE"
          fi
    sources:
      - '{{.LIB_PATH}}'
      - './Cargo.toml'
    generates:
      - '{{.OUT_DIR}}/**/*'
    cmds:
      - '
        cargo run --features "uniffi/cli uniffi-bindgen"
        --bin uniffi-bindgen generate --language "{{.LANGUAGE}}"
        --library "{{.LIB_PATH}}" --out-dir "{{.OUT_DIR}}"
'

  # Cleans dir if `{{.RELEASE}}` is set
  # Cleans dir if `{{.RELEASE}}` is set
  _clean-if-release:
    internal: true
    cmds:
      - task: '{{if .RELEASE}}clean{{else}}_void{{end}}'

  clean:
    - 'rm -rf "{{.SWIFT_DIR}}" "{{.APPLE_PROJECT_RUST_DIR}}" "{{.KOTLIN_DIR}}", "{{.ANDROID_LIB_DIR}}"'

  _rustup_install_targets:
    internal: true
    requires:
      vars: [TARGETS_VAR]
    cmds:
      - for:
          var: TARGETS_VAR
        task: '{{if contains .ITEM .INSTALLED_TARGETS}}_void{{else}}_rustup_install{{end}}'
        vars:
          TARGET: '{{.ITEM}}'

  _rustup_install:
    internal: true
    requires:
      vars: [TARGET]
    cmds:
      - echo "Installing target {{.TARGET}}"
      - 'rustup target add {{.TARGET}}'
