version: '3'

run: 'when_changed'

includes:
  rust-shared:
    taskfile: ../../extra/taskfile/Rust-Taskfile.yml
    flatten: true
    excludes: [check, lint, test]

vars:
  PROJECT_ROOT: '../../'
  ROOT_CARGO_TOML: '../../Cargo.toml'
  ROOT_CARGO_LOCK: '../../Cargo.lock'
  WASM_DIR: './pkg'
  SWIFT_DIR: './swift'
  APPLE_PROJECT_RUST_DIR: '../../safari/YomikiriTokenizer/rust'

  TARGET_WASM: 'wasm32-unknown-unknown'
  TARGET_IOS: 'aarch64-apple-ios'
  TARGET_IOS_SIM: 'aarch64-apple-ios-sim'

  INSTALLED_TARGETS:
    sh: rustup show
  TARGET_IOS_INSTALLED: '{{contains .TARGET_IOS .INSTALLED_TARGETS}}'
  TARGET_IOS_SIM_INSTALLED: '{{contains .TARGET_IOS_SIM .INSTALLED_TARGETS}}'

tasks:
  check:
    desc: 'Check files'
    cmds:
      - 'cargo check --target {{.TARGET_WASM}} --target {{.TARGET_IOS}}'

  lint:
    desc: 'Lint files'
    cmds:
      - 'cargo clippy --target {{.TARGET_WASM}} --target {{.TARGET_IOS}} -- -D warnings'

  test:
    desc: 'Test files'
    cmds:
      - 'cargo test'

  generate:
    cmds:
      - task: 'generate:wasm'
      - task: 'generate:ios'

  generate:wasm:
    desc: Build wasm backend
    cmds:
      - task: _clean-dir-if-release
        vars:
          DIR: '{{.WASM_DIR}}'
      - 'wasm-pack build {{if not .RELEASE}}--dev{{end}} -d "{{.WASM_DIR}}" --scope yomikiri --target web'

  generate:release:wasm:
    desc: Build wasm backend for release
    cmds:
      - task: generate:wasm
        vars:
          RELEASE: '1'

  generate:ios:
    desc: Build for ios
    cmds:
      - task: _clean-dir-if-release
        vars:
          DIR: '{{.SWIFT_DIR}}'
      - task: uniffi:ios
      - task: _clean-dir-if-release
        vars:
          DIR: '{{.APPLE_PROJECT_RUST_DIR}}'
      - 'cp -r {{.SWIFT_DIR}}/* {{.APPLE_PROJECT_RUST_DIR}}/'
      - task: '{{if .TARGET_IOS_INSTALLED}}build:lib:ios{{else}}_void{{end}}'
      - task: '{{if .TARGET_IOS_SIM_INSTALLED}}build:lib:ios-sim{{else}}_void{{end}}'

  generate:release:ios:
    desc: Build ios for release
    cmds:
      - task: generate:ios
        vars:
          RELEASE: '1'

  build:lib:ios-sim:
    run: when_changed
    cmds:
      - task: _build:lib
        vars:
          TARGET: '{{.TARGET_IOS_SIM}}'

  build:lib:ios:
    run: when_changed
    cmds:
      - task: _build:lib
        vars:
          TARGET: '{{.TARGET_IOS}}'

  # Rust lib build skip is delegated to cargo
  _build:lib:
    internal: true
    requires:
      vars: [TARGET]
    vars:
      FLAG_RELEASE: '{{if .RELEASE}}--release{{end}}'
      FLAG_TARGET: '{{if .TARGET}}--target {{.TARGET}}{{end}}'
    cmds:
      - 'cargo build --lib {{.FLAG_RELEASE}} {{.FLAG_TARGET}}'

  # Builds uniffi bindings for ios
  # Separates `_uniffi:ios` because that task requires LIB dylib to be built already
  uniffi:ios:
    deps:
      - task: '_build:lib'
        vars:
          TARGET: ''
    cmds:
      - task: '_uniffi:ios'

  _uniffi:ios:
    internal: true
    vars:
      RELEASE_SEG: '{{if .RELEASE}}release{{else}}debug{{end}}'
      LIB_DIR: '../../target/{{.RELEASE_SEG}}'
      SO_PATH: '{{.LIB_DIR}}/libyomikiri_rs.so'
      DYLIB_PATH: '{{.LIB_DIR}}/libyomikiri_rs.dylib'
      # Lib may be .so on linux and .dylib on macos
      LIB_PATH:
        sh: |
          if [ -f "{{.DYLIB_PATH}}" ]; then
            echo "{{.DYLIB_PATH}}"
          elif [ -f "{{.SO_PATH}}" ]; then
            echo "{{.SO_PATH}}"
          else
            echo "{{.LIB_DIR}}/__ERROR_COULD_NOT_FIND_BUILT_LIB_FILE"
          fi
    sources:
      - '{{.ROOT_PROJECT_TOML}}'
      - '{{.ROOT_PROJECT_LOCK}}'
      - '{{.LIB_PATH}}'
      - './src/**/*'
      - './Cargo.toml'
    generates:
      - '{{.SWIFT_DIR}}/**/*'
    cmds:
      - |
        cargo run --features "uniffi/cli uniffi-bindgen"  \
          --bin uniffi-bindgen generate --language swift  \
          --library "{{.LIB_PATH}}" --out-dir "{{.SWIFT_DIR}}"

  clean:
    cmds:
      - task: 'rm -rf {{.WASM_DIR}} {{.SWIFT_DIR}} {{.APPLE_PROJECT_RUST_DIR}}'

  # Cleans dir if `{{.RELEASE}}` is set
  _clean-dir-if-release:
    internal: true
    requires:
      vars: [DIR]
    cmds:
      - task: '{{if .RELEASE}}_clean-dir{{else}}_void{{end}}'
        vars:
          DIR: '{{.DIR}}'

  _clean-dir:
    internal: true
    requires:
      vars: [DIR]
    cmds:
      - 'rm -rf {{.DIR}}'

  # Empty task used for `task:{{if}}some_task{{else}}_void{{end}}`
  _void:
    internal: true
