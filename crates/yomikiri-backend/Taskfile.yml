version: '3'

run: 'when_changed'

includes:
  rust-shared:
    taskfile: ../../extra/taskfile/Rust-Taskfile.yml
    flatten: true

vars:
  PROJECT_ROOT: '../../'
  ROOT_CARGO_TOML: '../../Cargo.toml'
  ROOT_CARGO_LOCK: '../../Cargo.lock'
  ROOT_PNPM_LOCK: '{{.PROJECT_ROOT}}/pnpm-lock.yaml'
  SCHEMA_JSON: './bindings/generated.schema.json'
  TS_BINDING: './bindings/generated.d.ts'
  SCHEMARS_BINARY: '{{.PROJECT_ROOT}}/target/debug/schemars'

tasks:
  tsbinding:
    desc: Generate Typescript bindings for rust types
    cmds:
      - cargo build --bin schemars
      - task: rs_to_schema
      - task: schema_to_ts

  clean:
    desc: Remove build artifacts created by taskfile.
    cmds:
      - 'rm -rf {{.SCHEMA_JSON}} {{.TS_BINDING}}'

  rs_to_schema:
    sources:
      - '{{.SCHEMARS_BINARY}}'
    generates:
      - '{{.SCHEMA_JSON}}'
    cmds:
      - '{{.SCHEMARS_BINARY}}'

  schema_to_ts:
    sources:
      - '{{.SCHEMA_JSON}}'
      - '{{.ROOT_PNPM_LOCK}}'
    generates:
      - '{{.TS_BINDING}}'
    cmds:
      # --use-stderr outputs all outputs by pnpm to stderr, which is printed to terminal instead of being written to file
      # we use piping because json2ts is executed on workspace root
      - 'cat "{{.SCHEMA_JSON}}" | pnpm --use-stderr exec json2ts --additionalProperties=false > {{.TS_BINDING}}'
