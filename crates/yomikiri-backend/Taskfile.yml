version: '3'

includes:
  rust-shared:
    taskfile: ../../extra/taskfile/Rust-Taskfile.yml
    flatten: true

vars:
  PROJECT_ROOT: '../..'
  ROOT_CARGO_TOML: '../../Cargo.toml'
  ROOT_CARGO_LOCK: '../../Cargo.lock'
  ROOT_PNPM_LOCK: '{{.PROJECT_ROOT}}/pnpm-lock.yaml'
  SCHEMARS_BINARY: '{{.PROJECT_ROOT}}/target/debug/schemars'

  PACKAGE_JSON_SRC: './bin/bindings-package.json'
  OUTPUT_DIR: '{{.PROJECT_ROOT}}/generated/backend-bindings'
  SCHEMA_JSON: '{{.OUTPUT_DIR}}/generated.schema.json'
  TS_BINDING: '{{.OUTPUT_DIR}}/generated.d.ts'
  PACKAGE_JSON_DEST: '{{.OUTPUT_DIR}}/package.json'

tasks:
  tsbinding:
    desc: Generate Typescript bindings for rust types
    cmds:
      - cargo build --bin schemars
      - task: rs_to_schema
      - task: schema_to_ts
      # Must come after rs_to_schema as the dest folder must be generated first
      - task: copy_package_json

  clean:
    desc: Remove build artifacts created by taskfile.
    cmds:
      - 'rm -rf {{.OUTPUT_DIR}}'

  copy_package_json:
    sources:
      - '{{.PACKAGE_JSON_SRC}}'
    generates:
      - '{{.PACKAGE_JSON_DEST}}'
    cmds:
      - cp -f "{{.PACKAGE_JSON_SRC}}" "{{.PACKAGE_JSON_DEST}}"

  rs_to_schema:
    sources:
      - '{{.SCHEMARS_BINARY}}'
    generates:
      - '{{.SCHEMA_JSON}}'
    cmds:
      - '{{.SCHEMARS_BINARY}} "{{.SCHEMA_JSON}}"'

  schema_to_ts:
    sources:
      - '{{.SCHEMA_JSON}}'
      - '{{.ROOT_PNPM_LOCK}}'
    generates:
      - '{{.TS_BINDING}}'
    cmds:
      # --use-stderr outputs all outputs by pnpm to stderr, which is printed to terminal instead of being written to file
      # we use piping because json2ts is executed on workspace root
      - 'cat "{{.SCHEMA_JSON}}" | pnpm --use-stderr exec json2ts --additionalProperties=false > {{.TS_BINDING}}'
